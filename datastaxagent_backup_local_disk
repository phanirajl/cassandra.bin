#!/usr/bin/env bash

# allow invokation of related scripts in this dir
scriptdir=`dirname "$BASH_SOURCE"`
PATH="$scriptdir:$PATH"

OS_FLAVOR=$(os_flavor)
case $OS_FLAVOR in
	osx) 	;;
	ubuntu) ;;
        linux) ;;
	*) echo $OS_FLAVOR not supported; exit 1;;
esac

# List of backup paths
declare -A backup_path_list

backup_path_list[0]=/backup1/cassandra
backup_path_list[1]=/backup2/cassandra
backup_path_count=${#backup_path_list[@]}

# determine local disk backup to
backup_start=$(date)
date=$(date +%F)
epoch_seconds=$(date '+%s')
epoch_day=$(echo $epoch_seconds '/60/60/24' | bc -q )
backup_path_number=$(echo $epoch_day "%$backup_path_count" | bc -q )
backup_path=${backup_path_list[$backup_path_number]}
if [ x"$backup_path" == x ]; then echo Error: Missing backup path; exit 254; fi
if [ ! -d "$backup_path" ]; then echo Error: Backup path is not a directory; exit 253; fi

rm -rf "$backup_path"
mkdir  "$backup_path"
chown cassandra:cassandra "$backup_path"
chmod 777 "$backup_path"
mkdir  "$backup_path/files"
chown cassandra:cassandra "$backup_path/files"
chmod 777 "$backup_path/files"
(
	echo backup date $backup_start
	echo backup_path_count $backup_path_count
	echo seconds since epoch: $epoch_seconds
	echo days since epoch: $epoch_day
	echo backup path number: $backup_path_number
	echo backup path: "$backup_path"
) > "$backup_path/log"

set -e # stop and trigger trap if there is any error
trap "{ (echo Backup failed: Files backed up $file_count. Started $backup_start. Aborted $(date). 1>>"$backup_path/log" 2>&1); exit 255; }" EXIT
file_count=0
while read file_to_backup; do
	printf '%s - ' $(date '+%F %H:%M:%S') 					1>>"$backup_path/log" 2>&1
	if [ -d "$file_to_backup" ]; then
		mkdir -p "$backup_path/files$file_to_backup";			1>>"$backup_path/log" 2>&1
		chown cassandra:cassandra "$backup_path/files$file_to_backup"
		chmod 777 "$backup_path/files$file_to_backup"
	else
		cp -v -p --parents "$file_to_backup" "$backup_path/files" 	1>>"$backup_path/log" 2>&1
	fi
	let file_count=file_count+1 
done

trap "{ exit 0; }" EXIT
echo Backup successful. Files backed up $file_count. Started $backup_start. Completed $(date). 1>>"$backup_path/log" 2>&1
exit 0
